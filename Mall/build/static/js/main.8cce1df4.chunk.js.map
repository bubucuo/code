{"version":3,"sources":["components/TabBar/MenuItem.js","components/TabBar/index.js","pages/Home/index.js","pages/Search/index.js","pages/User/index.js","pages/404/index.js","pages/router.js","pages/All/index.js","App.js","serviceWorker.js","store/homeReducer.js","store/index.js","index.js"],"names":["MenuItem","props","data","active","handleMenuItem","changeActive","title","link","icon","to","className","onClick","TabBar","menu","currentPath","useState","activeIndex","setActie","map","item","index","key","Home","this","num","add","minus","asynAdd","console","log","Component","Search","User","Router","exact","path","component","_404","All","App","Boolean","window","location","hostname","match","homeReducer","state","action","type","store","createStore","combineReducers","home","applyMiddleware","logger","thunk","render","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAGe,SAASA,EAASC,GAAQ,IAC/BC,EAA+CD,EAA/CC,KAAsBC,GAAyBF,EAAzCG,eAAyCH,EAAzBE,QAAQE,EAAiBJ,EAAjBI,aAC9BC,EAAsBJ,EAAtBI,MAAOC,EAAeL,EAAfK,KAAMC,EAASN,EAATM,KACrB,OACE,kBAAC,IAAD,CAAMC,GAAIF,EAAMG,UAAW,YAAcP,EAAS,UAAY,IAAKQ,QAASN,GAC1E,yBAAKK,UAAW,iBAAmBF,IACnC,yBAAKE,UAAU,QAAQJ,I,MCLd,SAASM,EAAOX,GAAQ,IAAD,EACDA,EAA3BY,YAD4B,MACrB,GADqB,KACDZ,EAAhBa,YACaC,mBAAS,IAFL,mBAE7BC,EAF6B,KAEhBC,EAFgB,KAIpC,OACE,yBAAKP,UAAU,UAEXG,EAAKK,KAAI,SAACC,EAAMC,GACd,OAAO,kBAACpB,EAAD,CAAUqB,IAAK,WAAaD,EAAOlB,KAAMiB,EAAMhB,OAAQa,IAAgBI,EAAOf,aAAc,kBAAMY,EAASG,U,gECc7GE,E,iLAdH,IAAD,EAC8BC,KAAKtB,MAAlCuB,EADD,EACCA,IAAKC,EADN,EACMA,IAAKC,EADX,EACWA,MAAOC,EADlB,EACkBA,QAEzB,OADAC,QAAQC,IAAI,MAAON,KAAKtB,OAEtB,6BACE,2BAAIuB,GACJ,4BAAQb,QAASc,GAAjB,KACA,4BAAQd,QAASe,GAAjB,KACA,4BAAQf,QAASgB,GAAjB,gB,GATWG,aCTEC,E,iLAEjB,OACE,2C,GAH8BD,aCAfE,E,iLAEjB,OACE,yC,GAH4BF,aCAnB,SAASV,IACtB,OACE,yDCcWa,MAXf,SAAgBhC,GACd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,QAAQC,UAAWd,IACrC,kBAAC,IAAD,CAAOa,KAAK,UAAUC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,QAAQC,UAAWJ,IAC/B,kBAAC,IAAD,CAAOI,UAAWC,MCTlBxB,EAAO,CACX,CACEP,MAAO,eACPE,KAAM,SACND,KAAM,KAER,CACED,MAAO,eACPE,KAAM,SACND,KAAM,WAER,CACED,MAAO,eACPE,KAAM,OACND,KAAM,UAIK,SAAS+B,IACtB,OAAO,oCACL,yBAAK5B,UAAU,QACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAQG,KAAMA,K,YCdH0B,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCESC,EAXK,WAAwB,IAAvBC,EAAsB,uDAAd,EAAGC,EAAW,uCACzC,OAAQA,EAAOC,MACb,IAAK,MAEH,OADApB,QAAQC,IAAI,OACLiB,EAAQ,EACjB,IAAK,QACH,OAAOA,EAAQ,EACjB,QACE,OAAOA,ICNEG,EANDC,YACZC,YAAgB,CACdC,KAAMP,IAERQ,YAAgBC,IAAQC,MCDpBC,EAAS,WACbC,IAASD,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEFS,SAASC,eAAe,UAE5BH,IACAP,EAAMW,UAAUJ,GHiHV,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8cce1df4.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function MenuItem(props) {\n  const { data, handleMenuItem, active, changeActive } = props\n  const { title, link, icon } = data\n  return (\n    <Link to={link} className={\"menuItem\" + (active ? \" active\" : \"\")} onClick={changeActive}>\n      <div className={\"iconfont icon-\" + icon}></div>\n      <div className=\"name\">{title}</div>\n    </Link>\n  )\n}\n","import React, { Component, useState } from 'react'\nimport MenuItem from './MenuItem'\nimport './index.scss'\n\nexport default function TabBar(props) {\n  const { menu = [], currentPath } = props\n  const [activeIndex, setActie] = useState(0)\n\n  return (\n    <div className=\"tabBar\">\n      {\n        menu.map((item, index) => {\n          return <MenuItem key={'menuItem' + index} data={item} active={activeIndex === index} changeActive={() => setActie(index)} />\n        })\n      }\n    </div>\n  )\n}\n\n\n\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n//import store from '../../store'\n//import { add, minus, asynAdd } from '../../action/homeAction'\n/* @connect(\n  state => ({\n    num: state\n  }), {\n    add, minus, asynAdd\n  }\n) */\nclass Home extends Component {\n  render() {\n    const { num, add, minus, asynAdd } = this.props\n    console.log('hah', this.props)\n    return (\n      <div>\n        <p>{num}</p>\n        <button onClick={add}>+</button>\n        <button onClick={minus}>-</button>\n        <button onClick={asynAdd}>asynAdd</button>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\n\nexport default class Search extends Component {\n  render() {\n    return (\n      <div>\n        Search\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class User extends Component {\n  render() {\n    return (\n      <div>\n        User\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default function index() {\n  return (\n    <div>\n      找不到哦\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from './Home';\nimport Search from './Search/';\nimport User from './User/';\nimport _404 from './404/'\n\nfunction Router(props) {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route exact path=\"/home\" component={Home}></Route>\n      <Route path=\"/search\" component={Search}></Route>\n      <Route path=\"/user\" component={User}></Route>\n      <Route component={_404}></Route>\n    </Switch>\n  )\n}\nexport default Router","import React, { Component } from 'react';\nimport TabBar from '../../components/TabBar';\nimport './index.scss'\nimport Router from '../router';\n\nconst menu = [\n  {\n    title: '首页',\n    icon: 'shouye',\n    link: '/',\n  },\n  {\n    title: '分类',\n    icon: 'fenlei',\n    link: '/search',\n  },\n  {\n    title: '我的',\n    icon: 'wode',\n    link: '/user',\n  }\n]\n\nexport default function All() {\n  return <>\n    <div className=\"page\">\n      <Router />\n    </div>\n    <TabBar menu={menu} />\n  </>\n}","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport All from './pages/All/';\nimport './index.css';\nimport './static/iconfont/iconfont.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <All />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* export const counterReducer = (state = 0, action) => { }\nexport const add = num => ({ type: 'add', payload: num })\nexport const minus = num => ({ type: 'minus', payload: num })\nexport const asynAdd = () => dispatch => {\n  setTimeout(() => {\n    dispatch({ type: 'add' })\n  }, 1000)\n} */\n\nconst homeReducer = (state = 1, action) => {\n  switch (action.type) {\n    case 'add':\n      console.log('omg')\n      return state + 1\n    case 'minus':\n      return state - 1\n    default:\n      return state\n  }\n}\nexport default homeReducer","import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport logger from \"redux-logger\";\nimport homeReducer from './homeReducer'\n\nconst store = createStore(\n  combineReducers({\n    home: homeReducer\n  }),\n  applyMiddleware(logger, thunk)\n)\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import store from './store'\nimport store from './store/'\nimport { Provider } from 'react-redux'\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'));\n}\nrender()\nstore.subscribe(render)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}